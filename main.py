import os
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

import httpx
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")           # –∑–∞–¥–∞–¥–∏–º –≤ Render
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret") # —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞
BASE_URL = (os.getenv("RENDER_EXTERNAL_URL") or        # Render —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç
            os.getenv("WEBHOOK_URL"))                  # –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å ‚Äî —É–∫–∞–∂–∏ —Å–∞–º–∞
PROZORRO_API_BASE = os.getenv("PROZORRO_API_BASE", "https://public.api.openprocurement.org/api/2.5")

# ===== –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å) =====
BUTTONS = [
    "–≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å",
    "–±–µ–Ω—Ç–æ–Ω—ñ—Ç",
    "–≥–µ–æ—Ä–µ—à—ñ—Ç–∫–∞",
    "–≥–µ–æ–º–µ–º–±—Ä–∞–Ω–∞",
    "–≥–µ–æ—Å—ñ—Ç–∫–∞",
    "–ü—Ä–æ—Ç–∏—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è –Ω–æ–≤–µ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ",
    "–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ –∑–∞—Ö–∏—Å–Ω–æ—ó —Å–ø–æ—Ä—É–¥–∏",
]

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
if not TELEGRAM_TOKEN:
    print("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–¥–∞–π –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")

bot = Bot(token=TELEGRAM_TOKEN) if TELEGRAM_TOKEN else None
dp = Dispatcher()
router = Router()
dp.include_router(router)
app = FastAPI()

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ =====
def make_keyboard() -> ReplyKeyboardMarkup:
    rows, row = [], []
    for text in BUTTONS:
        row.append(KeyboardButton(text=text))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# ===== –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π =====
@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à—É–∫–∞—é —Ç–µ–Ω–¥–µ—Ä–∏ –≤ Prozorro –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –≤–∏–±—Ä–∞–Ω–∏–º –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–ª–æ–≤–æ.",
        reply_markup=make_keyboard()
    )

@router.message(F.text.in_(BUTTONS))
async def keyword_handler(message: types.Message):
    kw = message.text.strip()
    tenders = await get_tenders_for_keyword(kw)
    if not tenders:
        await message.answer(f"–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –∑–∞–ø–∏—Ç—É ¬´{kw}¬ª —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    chunks = format_tenders_message(kw, tenders)
    for part in chunks:
        await message.answer(part, disable_web_page_preview=True)

# –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –∏—â–µ–º –ø–æ –Ω–µ–º—É
@router.message(F.text)
async def any_text_handler(message: types.Message):
    kw = message.text.strip()
    if not kw:
        return
    tenders = await get_tenders_for_keyword(kw)
    if not tenders:
        await message.answer(f"–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –∑–∞–ø–∏—Ç—É ¬´{kw}¬ª —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    chunks = format_tenders_message(kw, tenders)
    for part in chunks:
        await message.answer(part, disable_web_page_preview=True)

# ===== –í–µ–±—Ö—É–∫ –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã =====
@app.get("/")
async def root():
    return {"status": "ok"}

@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    if not (bot and BASE_URL):
        print("‚ö†Ô∏è –ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ BASE_URL.")
        return
    url = f"{BASE_URL.rstrip('/')}/webhook/{WEBHOOK_SECRET}"
    try:
        await bot.set_webhook(url)
        print(f"‚úÖ Webhook set to {url}")
    except Exception as e:
        print(f"‚ùå set_webhook failed: {e}")

@app.on_event("shutdown")
async def on_shutdown():
    if bot:
        await bot.delete_webhook()

# ===== –õ–æ–≥–∏–∫–∞: –∑–∞–ø—Ä–æ—Å—ã –∫ Prozorro =====
async def fetch_tenders_since(cutoff_dt_utc: datetime):
    """
    –ó–∞–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö, –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è,
    –∫–æ–≥–¥–∞ –¥–æ—à–ª–∏ –¥–æ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ cutoff.
    """
    results = []
    offset = None
    params_base = {
        "opt_fields": "id,tenderID,title,description,dateModified,procuringEntity",
        "limit": 100,
        "descending": 1,  # –±–µ—Ä—ë–º —Å–≤–µ–∂–∏–µ –ø–µ—Ä–≤—ã–º–∏, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    }
    MAX_PAGES = 50  # –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å

    async with httpx.AsyncClient(timeout=20) as client:
        for _ in range(MAX_PAGES):
            params = dict(params_base)
            if offset:
                params["offset"] = offset

            r = await client.get(f"{PROZORRO_API_BASE}/tenders", params=params)
            r.raise_for_status()
            payload = r.json()
            data = payload.get("data", [])
            if not data:
                break

            stop = False
            for t in data:
                dm = t.get("dateModified")
                if not dm:
                    continue
                dm_dt = datetime.fromisoformat(dm.replace("Z", "+00:00"))
                if dm_dt < cutoff_dt_utc:
                    stop = True
                    break
                results.append(t)

            if stop:
                break

            offset = payload.get("next_page", {}).get("offset")
            if not offset:
                break

    return results

async def get_tenders_for_keyword(keyword: str):
    """
    –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–Ω–¥–µ—Ä—ã –∑–∞ 24 —á–∞—Å–∞ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é —Å–ª–æ–≤–∞ –≤ title/description (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
    """
    cutoff = datetime.now(timezone.utc) - timedelta(hours=24)
    all_recent = await fetch_tenders_since(cutoff)

    kw = keyword.lower()
    matched = []
    for t in all_recent:
        title = (t.get("title") or "").lower()
        descr = (t.get("description") or "").lower()
        if kw in title or kw in descr:
            matched.append(t)

    matched.sort(key=lambda x: x.get("dateModified", ""), reverse=True)
    return matched

def format_tenders_message(kw: str, tenders: list, limit: int = 10):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –Ω–∞—Ä–µ–∑–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –¥–æ ~3800 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥ –ª–∏–º–∏—Ç Telegram.
    """
    kyiv = ZoneInfo("Europe/Kyiv")
    header = f"üßæ –¢–µ–Ω–¥–µ—Ä–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –∑–∞–ø–∏—Ç—É ¬´{kw}¬ª: –ø–æ–∫–∞–∑—É—é {min(len(tenders), limit)} –∑ {len(tenders)}\n\n"

    blocks = [header]
    for t in tenders[:limit]:
        dm = t.get("dateModified")
        dm_dt = datetime.fromisoformat(dm.replace("Z", "+00:00")).astimezone(kyiv) if dm else None
        tender_id = t.get("tenderID")
        portal_link = f"https://prozorro.gov.ua/tender/{tender_id}" if tender_id else f"{PROZORRO_API_BASE}/tenders/{t.get('id')}"
        title = t.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        org = (t.get("procuringEntity") or {}).get("name") or "‚Äî"
        when = dm_dt.strftime("%Y-%m-%d %H:%M") if dm_dt else "‚Äî"

        block = (
            f"‚Ä¢ {title}\n"
            f"–ó–∞–º–æ–≤–Ω–∏–∫: {org}\n"
            f"–ó–º—ñ–Ω–µ–Ω–æ: {when} (Kyiv)\n"
            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {portal_link}\n\n"
        )
        blocks.append(block)

    chunks, buf = [], ""
    for b in blocks:
        if len(buf) + len(b) > 3800:
            chunks.append(buf)
            buf = b
        else:
            buf += b
    if buf:
        chunks.append(buf)
    return chunks
