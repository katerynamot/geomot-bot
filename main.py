import os
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

import httpx
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")           # –∑–∞–¥–∞–¥–∏–º –≤ Render
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret") # —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞
BASE_URL = (os.getenv("RENDER_EXTERNAL_URL") or        # Render —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç
            os.getenv("WEBHOOK_URL"))                  # –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å ‚Äî —É–∫–∞–∂–∏ —Å–∞–º–∞
PROZORRO_API_BASE = os.getenv("PROZORRO_API_BASE", "https://public.api.openprocurement.org/api/2.5")

# ===== –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é =====
BUTTONS = [
    "–≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å",
    "–±–µ–Ω—Ç–æ–Ω—ñ—Ç",
    "–≥–µ–æ—Ä–µ—à—ñ—Ç–∫–∞",
    "–≥–µ–æ–º–µ–º–±—Ä–∞–Ω–∞",
    "–≥–µ–æ—Å—ñ—Ç–∫–∞",
    "–ü—Ä–æ—Ç–∏—Ä–∞–¥—ñ–∞—Ü—ñ–π–Ω–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è –Ω–æ–≤–µ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ",
    "–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ –∑–∞—Ö–∏—Å–Ω–æ—ó —Å–ø–æ—Ä—É–¥–∏",
]

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
if not TELEGRAM_TOKEN:
    print("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–¥–∞–π –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")

bot = Bot(token=TELEGRAM_TOKEN) if TELEGRAM_TOKEN else None
dp = Dispatcher()
router = Router()
dp.include_router(router)
app = FastAPI()

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ =====
def make_keyboard() -> ReplyKeyboardMarkup:
    rows, row = [], []
    for text in BUTTONS:
        row.append(KeyboardButton(text=text))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# ===== –°—Ç–∞—Ä—Ç =====
@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —à—É–∫–∞—é —Ç–µ–Ω–¥–µ—Ä–∏ –≤ Prozorro –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –≤–∏–±—Ä–∞–Ω–∏–º –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–ª–æ–≤–æ.\n\n"
        "–¢–∞–∫–æ–∂ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: /geotextile, /geomembrane, /geogrid, /geonet, /bentonite",
        reply_markup=make_keyboard()
    )

# ===== –ö–æ–º–∞–Ω–¥—ã-—Å–ø—Ä–∞–≤–∫–∞ =====
@router.message(F.text == "/geotextile")
async def geotextile_cmd(message: types.Message):
    await message.answer(
        "üßµ –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å ‚Äî —Ü–µ –Ω–µ—Ç–∫–∞–Ω–∏–π —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è:\n"
        "‚Ä¢ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —à–∞—Ä—ñ–≤ “ë—Ä—É–Ω—Ç—É;\n"
        "‚Ä¢ –∞—Ä–º—É–≤–∞–Ω–Ω—è;\n"
        "‚Ä¢ –¥—Ä–µ–Ω–∞–∂—É;\n"
        "‚Ä¢ –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –µ—Ä–æ–∑—ñ—ó.\n\n"
        "–í—ñ–Ω —à–∏—Ä–æ–∫–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —É –¥–æ—Ä–æ–∂–Ω—å–æ–º—É –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤—ñ, –≥—ñ–¥—Ä–æ—Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Å–ø–æ—Ä—É–¥–∞—Ö —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö."
    )

@router.message(F.text == "/geomembrane")
async def geomembrane_cmd(message: types.Message):
    await message.answer(
        "üìë –ì–µ–æ–º–µ–º–±—Ä–∞–Ω–∞ ‚Äî —Ü–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏–∫–Ω–∏–π —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —É –≤–∏–≥–ª—è–¥—ñ –≥–Ω—É—á–∫–∏—Ö –ª–∏—Å—Ç—ñ–≤.\n"
        "–û—Å–Ω–æ–≤–Ω—ñ —Å—Ñ–µ—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:\n"
        "‚Ä¢ —ñ–∑–æ–ª—è—Ü—ñ—è –≤–æ–¥–æ–π–º, –¥–∞–º–± —ñ –∫–∞–Ω–∞–ª—ñ–≤;\n"
        "‚Ä¢ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø—Ä–æ—Å–æ—á—É–≤–∞–Ω–Ω—è —Ä—ñ–¥–∏–Ω;\n"
        "‚Ä¢ –ø–æ–ª—ñ–≥–æ–Ω–∏ —Ç–≤–µ—Ä–¥–∏—Ö –ø–æ–±—É—Ç–æ–≤–∏—Ö –≤—ñ–¥—Ö–æ–¥—ñ–≤;\n"
        "‚Ä¢ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Ä–∞–¥—ñ–∞—Ü—ñ—ó —Ç–∞ —Ö—ñ–º—ñ—á–Ω–∏—Ö –∑–∞–±—Ä—É–¥–Ω–µ–Ω—å."
    )

@router.message(F.text == "/geogrid")
async def geogrid_cmd(message: types.Message):
    await message.answer(
        "ü™¢ –ì–µ–æ—Ä–µ—à—ñ—Ç–∫–∞ ‚Äî —Ü–µ –ø–æ–ª—ñ–º–µ—Ä–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —ñ–∑ —Å—ñ—Ç—á–∞—Å—Ç–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è:\n"
        "‚Ä¢ –∞—Ä–º—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤ –¥–æ—Ä—ñ–≥ —Ç–∞ —É–∫–æ—Å—ñ–≤;\n"
        "‚Ä¢ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó “ë—Ä—É–Ω—Ç—ñ–≤;\n"
        "‚Ä¢ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ä–æ–∑–ø–æ–≤–∑–∞–Ω–Ω—é —à–∞—Ä—ñ–≤.\n\n"
        "–û—Å–æ–±–ª–∏–≤–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –ø—Ä–∏ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤—ñ –Ω–∞ —Å–ª–∞–±–∫–∏—Ö “ë—Ä—É–Ω—Ç–∞—Ö."
    )

@router.message(F.text == "/geonet")
async def geonet_cmd(message: types.Message):
    await message.answer(
        "üï∏ –ì–µ–æ—Å—ñ—Ç–∫–∞ ‚Äî —Ü–µ —Å—ñ—Ç—á–∞—Å—Ç–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —ñ–∑ –ø–æ–ª—ñ–º–µ—Ä—ñ–≤ –∞–±–æ —Å–∫–ª–æ–≤–æ–ª–æ–∫–Ω–∞.\n"
        "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:\n"
        "‚Ä¢ –∞—Ä–º—É–≤–∞–Ω–Ω—è –∞—Å—Ñ–∞–ª—å—Ç–æ–≤–æ–≥–æ –ø–æ–∫—Ä–∏—Ç—Ç—è;\n"
        "‚Ä¢ –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ç—Ä—ñ—â–∏–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è;\n"
        "‚Ä¢ –∑–º—ñ—Ü–Ω–µ–Ω–Ω—è —É–∫–æ—Å—ñ–≤ —ñ –¥–∞–º–±."
    )

@router.message(F.text == "/bentonite")
async def bentonite_cmd(message: types.Message):
    await message.answer(
        "ü™® –ë–µ–Ω—Ç–æ–Ω—ñ—Ç ‚Äî —Ü–µ –ø—Ä–∏—Ä–æ–¥–Ω–∞ –≥–ª–∏–Ω–∞ –∑ –≤–∏—Å–æ–∫–∏–º –≤–º—ñ—Å—Ç–æ–º –º–æ–Ω—Ç–º–æ—Ä–∏–ª–æ–Ω—ñ—Ç—É.\n"
        "–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ:\n"
        "‚Ä¢ –Ω–∞–±—É—Ö–∞—î —É –≤–æ–¥—ñ, —É—Ç–≤–æ—Ä—é—é—á–∏ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏–∫–Ω–∏–π —à–∞—Ä;\n"
        "‚Ä¢ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —É –≥—ñ–¥—Ä–æ—ñ–∑–æ–ª—è—Ü—ñ—ó —Å–ø–æ—Ä—É–¥;\n"
        "‚Ä¢ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –±–µ–Ω—Ç–æ–Ω—ñ—Ç–æ–≤–∏—Ö –º–∞—Ç–∞—Ö –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —Å—Ö–æ–≤–∏—â."
    )

# ===== –ü–æ–∏—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º =====
@router.message(F.text.in_(BUTTONS))
async def keyword_handler(message: types.Message):
    kw = message.text.strip()
    tenders = await get_tenders_for_keyword(kw)
    if not tenders:
        await message.answer(f"–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –∑–∞–ø–∏—Ç—É ¬´{kw}¬ª —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    chunks = format_tenders_message(kw, tenders)
    for part in chunks:
        await message.answer(part, disable_web_page_preview=True)

# ===== –§–æ–ª–ª–±–µ–∫ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç) =====
@router.message(F.text)
async def any_text_handler(message: types.Message):
    kw = message.text.strip()
    if not kw:
        return
    tenders = await get_tenders_for_keyword(kw)
    if not tenders:
        await message.answer(f"–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –∑–∞–ø–∏—Ç—É ¬´{kw}¬ª —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    chunks = format_tenders_message(kw, tenders)
    for part in chunks:
        await message.answer(part, disable_web_page_preview=True)

# ===== –í–µ–±—Ö—É–∫ =====
@app.get("/")
async def root():
    return {"status": "ok"}

@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    if not (bot and BASE_URL):
        print("‚ö†Ô∏è –ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ BASE_URL.")
        return
    url = f"{BASE_URL.rstrip('/')}/webhook/{WEBHOOK_SECRET}"
    try:
        await bot.set_webhook(url)
        print(f"‚úÖ Webhook set to {url}")
    except Exception as e:
        print(f"‚ùå set_webhook failed: {e}")

@app.on_event("shutdown")
async def on_shutdown():
    if bot:
        await bot.delete_webhook()

# ===== –õ–æ–≥–∏–∫–∞ Prozorro =====
async def fetch_tenders_since(cutoff_dt_utc: datetime):
    results = []
    offset = None
    params_base = {
        "opt_fields": "id,tenderID,title,description,dateModified,procuringEntity",
        "limit": 100,
        "descending": 1,
    }
    MAX_PAGES = 50

    async with httpx.AsyncClient(timeout=20) as client:
        for _ in range(MAX_PAGES):
            params = dict(params_base)
            if offset:
                params["offset"] = offset
            r = await client.get(f"{PROZORRO_API_BASE}/tenders", params=params)
            r.raise_for_status()
            payload = r.json()
            data = payload.get("data", [])
            if not data:
                break
            stop = False
            for t in data:
                dm = t.get("dateModified")
                if not dm:
                    continue
                dm_dt = datetime.fromisoformat(dm.replace("Z", "+00:00"))
                if dm_dt < cutoff_dt_utc:
                    stop = True
                    break
                results.append(t)
            if stop:
                break
            offset = payload.get("next_page", {}).get("offset")
            if not offset:
                break
    return results

async def get_tenders_for_keyword(keyword: str):
    cutoff = datetime.now(timezone.utc) - timedelta(hours=24)
    all_recent = await fetch_tenders_since(cutoff)
    kw = keyword.lower()
    matched = []
    for t in all_recent:
        title = (t.get("title") or "").lower()
        descr = (t.get("description") or "").lower()
        if kw in title or kw in descr:
            matched.append(t)
    matched.sort(key=lambda x: x.get("dateModified", ""), reverse=True)
    return matched

def format_tenders_message(kw: str, tenders: list, limit: int = 10):
    kyiv = ZoneInfo("Europe/Kyiv")
    header = f"üßæ –¢–µ–Ω–¥–µ—Ä–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏ –ø–æ –∑–∞–ø–∏—Ç—É ¬´{kw}¬ª: –ø–æ–∫–∞–∑—É—é {min(len(tenders), limit)} –∑ {len(tenders)}\n\n"
    blocks = [header]
    for t in tenders[:limit]:
        dm = t.get("dateModified")
        dm_dt = datetime.fromisoformat(dm.replace("Z", "+00:00")).astimezone(kyiv) if dm else None
        tender_id = t.get("tenderID")
        portal_link = f"https://prozorro.gov.ua/tender/{tender_id}" if tender_id else f"{PROZORRO_API_BASE}/tenders/{t.get('id')}"
        title = t.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        org = (t.get("procuringEntity") or {}).get("name") or "‚Äî"
        when = dm_dt.strftime("%Y-%m-%d %H:%M") if dm_dt else "‚Äî"
        block = (
            f"‚Ä¢ {title}\n"
            f"–ó–∞–º–æ–≤–Ω–∏–∫: {org}\n"
            f"–ó–º—ñ–Ω–µ–Ω–æ: {when} (Kyiv)\n"
            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {portal_link}\n\n"
        )
        blocks.append(block)
    chunks, buf = [], ""
    for b in blocks:
        if len(buf) + len(b) > 3800:
            chunks.append(buf)
            buf = b
        else:
            buf += b
    if buf:
        chunks.append(buf)
    return chunks
